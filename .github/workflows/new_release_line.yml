name: New Release Line

on:
  workflow_dispatch:
    inputs:
      new_branch_major:
        description: "Next release Major version (LEAVE EMPTY FOR AUTO-INCREMENT)"
      new_branch_minor:
        description: "Next release Minor version (LEAVE EMPTY FOR AUTO-INCREMENT)"

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: alpine:3.14

    steps:
      - name: pre-run
        run: apk update && apk add git sudo openssh

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.RELEASE_SSH_KEY }}

      - name: Calculate tag
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config user.name "Github Runner Bot"
          git config user.email "<>"
          git pull origin main
          major=$(cat $GITHUB_WORKSPACE/speedb/version.h | grep '#define SPEEDB_MAJOR' | grep -o '[^,]\+$' | tr ' ' '\n' | tail -n1)
          minor=$(cat $GITHUB_WORKSPACE/speedb/version.h | grep '#define SPEEDB_MINOR' | grep -o '[^,]\+$' | tr ' ' '\n' | tail -n1)
          patch=$(cat $GITHUB_WORKSPACE/speedb/version.h | grep '#define SPEEDB_PATCH' | grep -o '[^,]\+$' | tr ' ' '\n' | tail -n1)
          new_minor=$(echo $minor + 1 | bc)
          echo "major=$major" >> $GITHUB_ENV
          echo "minor=$minor" >> $GITHUB_ENV
          echo "patch=$patch" >> $GITHUB_ENV
          echo "new_minor=$new_minor" >> $GITHUB_ENV
      
      - name: Update version.h
        run: |
          if [ -z "${{ inputs.new_branch_major }}" ] && [ -z ${{ inputs.new_branch_minor }} ]; then
            git checkout main
            sed -i -e "s/#define SPEEDB_MAJOR.*/#define SPEEDB_MAJOR ${{ env.major }}/" speedb/version.h
            sed -i -e "s/#define SPEEDB_MINOR.*/#define SPEEDB_MINOR ${{ env.new_minor }}/" speedb/version.h
            sed -i -e "s/#define SPEEDB_PATCH.*/#define SPEEDB_PATCH 0/" speedb/version.h
            git commit -am "publish version ${{ env.major }}.${{ env.new_minor }}.0"
            git push -u -f origin main
            git tag "v${{ env.major }}.${{ env.new_minor }}"
            git push --tags
          else
            git checkout main
            sed -i -e "s/#define SPEEDB_MAJOR.*/#define SPEEDB_MAJOR ${{ inputs.new_branch_major }}/" speedb/version.h
            sed -i -e "s/#define SPEEDB_MINOR.*/#define SPEEDB_MINOR ${{ inputs.new_branch_minor }}/" speedb/version.h
            sed -i -e "s/#define SPEEDB_PATCH.*/#define SPEEDB_PATCH 0/" speedb/version.h
            git commit -am "publish version ${{ inputs.new_branch_major }}.${{ inputs.new_branch_minor }}.0 "
            git push -u -f origin main
            git tag "v${{ inputs.new_branch_major }}.${{ inputs.new_branch_minor }}"
            git push --tags
          fi
      - name: Create release branch
        run: |
          if [ -z "${{ inputs.new_branch_major }}" ] && [ -z "${{ inputs.new_branch_minor }}" ]; then
            echo "####### NO INPUT DETECTED, AUTO-INCREMENTING. NEW VERSION: v${{ env.major }}.${{ env.new_minor }}.0 #######"
            new_branch="release/v${{ env.major }}.${{ env.new_minor }}"
            git checkout -b $new_branch
            git push -u origin $new_branch
          else
            new_branch="release/v${{ inputs.new_branch_major }}.${{ inputs.new_branch_minor }}"
            branch_exist=$(git ls-remote --heads origin ${new_branch})
            if [[ -z ${branch_exist} ]]; then
              echo "####### INPUT DETECTED, NEW VERSION: v${{ inputs.new_branch_major }}.${{ inputs.new_branch_minor }}.0 #######"
              git checkout -b $new_branch
              git push -u origin $new_branch
            else
              echo "Branch already exists"
            fi
          fi
