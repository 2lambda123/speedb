// TODO: ADD Speedb's Copyright Notice !!!!!

#pragma once
#include "rocksdb/filter_policy.h"

namespace ROCKSDB_NAMESPACE {

// Forward Declarations
class ObjectLibrary;
struct FilterBuildingContext;

class SpdbPairedBloomFilterPolicy : public FilterPolicy {
 public:
  // Max supported BPK. Filters using higher BPK-s will use the max
  static constexpr double kMaxBitsPerKey = 100.0;

 public:
  explicit SpdbPairedBloomFilterPolicy(double bits_per_key);

  FilterBitsBuilder* GetBuilderWithContext(
      const FilterBuildingContext& context) const override;

  FilterBitsReader* GetFilterBitsReader(const Slice& contents) const override;

  // Plug-In Support
 public:
  static const char* kClassName();
  const char* Name() const override { return kClassName(); }
  static const char* kNickName();
  const char* NickName() const override { return kNickName(); }

  std::string GetId() const override;

  bool IsInstanceOf(const std::string& name) const override;

  // This filter is NOT compatible with RocksDB's built-in filter, only with
  // itself
  const char* CompatibilityName() const override {
    return kCompatibilityName();
  }
  static const char* kCompatibilityName() { return kClassName(); }

 private:
  // This filter supports fractional bits per key. For predictable behavior
  // of 0.001-precision values across floating point implementations, we
  // round to thousandths of a bit (on average) per key.
  int millibits_per_key_;

  // State for implementing optimize_filters_for_memory. Essentially, this
  // tracks a surplus or deficit in total FP rate of filters generated by
  // builders under this policy vs. what would have been generated without
  // optimize_filters_for_memory.
  //
  // To avoid floating point weirdness, the actual value is
  //  Sum over all generated filters f:
  //   (predicted_fp_rate(f) - predicted_fp_rate(f|o_f_f_m=false)) * 2^32
  mutable std::atomic<int64_t> aggregate_rounding_balance_;
};

// Plug-In Support
extern "C" {
int register_SpdbPairedBloomFilter(ROCKSDB_NAMESPACE::ObjectLibrary& library,
                                   const std::string&);
}  // extern "C"

}  // namespace ROCKSDB_NAMESPACE
